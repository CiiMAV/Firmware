// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file sensor_accel_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _sensor_accel__H_
#define _sensor_accel__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(sensor_accel__SOURCE)
#define sensor_accel__DllAPI __declspec( dllexport )
#else
#define sensor_accel__DllAPI __declspec( dllimport )
#endif // sensor_accel__SOURCE
#else
#define sensor_accel__DllAPI
#endif
#else
#define sensor_accel__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure sensor_accel_ defined by the user in the IDL file.
 * @ingroup SENSOR_ACCEL_
 */
class sensor_accel_
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_accel_();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_accel_();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_accel_ that will be copied.
     */
    eProsima_user_DllExport sensor_accel_(const sensor_accel_ &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_accel_ that will be copied.
     */
    eProsima_user_DllExport sensor_accel_(sensor_accel_ &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_accel_ that will be copied.
     */
    eProsima_user_DllExport sensor_accel_& operator=(const sensor_accel_ &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_accel_ that will be copied.
     */
    eProsima_user_DllExport sensor_accel_& operator=(sensor_accel_ &&x);
    
    /*!
     * @brief This function sets a value in member integral_dt
     * @param _integral_dt New value for member integral_dt
     */
    inline eProsima_user_DllExport void integral_dt(uint64_t _integral_dt)
    {
        m_integral_dt = _integral_dt;
    }

    /*!
     * @brief This function returns the value of member integral_dt
     * @return Value of member integral_dt
     */
    inline eProsima_user_DllExport uint64_t integral_dt() const
    {
        return m_integral_dt;
    }

    /*!
     * @brief This function returns a reference to member integral_dt
     * @return Reference to member integral_dt
     */
    inline eProsima_user_DllExport uint64_t& integral_dt()
    {
        return m_integral_dt;
    }
    /*!
     * @brief This function sets a value in member error_count
     * @param _error_count New value for member error_count
     */
    inline eProsima_user_DllExport void error_count(uint64_t _error_count)
    {
        m_error_count = _error_count;
    }

    /*!
     * @brief This function returns the value of member error_count
     * @return Value of member error_count
     */
    inline eProsima_user_DllExport uint64_t error_count() const
    {
        return m_error_count;
    }

    /*!
     * @brief This function returns a reference to member error_count
     * @return Reference to member error_count
     */
    inline eProsima_user_DllExport uint64_t& error_count()
    {
        return m_error_count;
    }
    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    inline eProsima_user_DllExport void x(float _x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    inline eProsima_user_DllExport float x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    inline eProsima_user_DllExport float& x()
    {
        return m_x;
    }
    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    inline eProsima_user_DllExport void y(float _y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    inline eProsima_user_DllExport float y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    inline eProsima_user_DllExport float& y()
    {
        return m_y;
    }
    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    inline eProsima_user_DllExport void z(float _z)
    {
        m_z = _z;
    }

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    inline eProsima_user_DllExport float z() const
    {
        return m_z;
    }

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    inline eProsima_user_DllExport float& z()
    {
        return m_z;
    }
    /*!
     * @brief This function sets a value in member x_integral
     * @param _x_integral New value for member x_integral
     */
    inline eProsima_user_DllExport void x_integral(float _x_integral)
    {
        m_x_integral = _x_integral;
    }

    /*!
     * @brief This function returns the value of member x_integral
     * @return Value of member x_integral
     */
    inline eProsima_user_DllExport float x_integral() const
    {
        return m_x_integral;
    }

    /*!
     * @brief This function returns a reference to member x_integral
     * @return Reference to member x_integral
     */
    inline eProsima_user_DllExport float& x_integral()
    {
        return m_x_integral;
    }
    /*!
     * @brief This function sets a value in member y_integral
     * @param _y_integral New value for member y_integral
     */
    inline eProsima_user_DllExport void y_integral(float _y_integral)
    {
        m_y_integral = _y_integral;
    }

    /*!
     * @brief This function returns the value of member y_integral
     * @return Value of member y_integral
     */
    inline eProsima_user_DllExport float y_integral() const
    {
        return m_y_integral;
    }

    /*!
     * @brief This function returns a reference to member y_integral
     * @return Reference to member y_integral
     */
    inline eProsima_user_DllExport float& y_integral()
    {
        return m_y_integral;
    }
    /*!
     * @brief This function sets a value in member z_integral
     * @param _z_integral New value for member z_integral
     */
    inline eProsima_user_DllExport void z_integral(float _z_integral)
    {
        m_z_integral = _z_integral;
    }

    /*!
     * @brief This function returns the value of member z_integral
     * @return Value of member z_integral
     */
    inline eProsima_user_DllExport float z_integral() const
    {
        return m_z_integral;
    }

    /*!
     * @brief This function returns a reference to member z_integral
     * @return Reference to member z_integral
     */
    inline eProsima_user_DllExport float& z_integral()
    {
        return m_z_integral;
    }
    /*!
     * @brief This function sets a value in member temperature
     * @param _temperature New value for member temperature
     */
    inline eProsima_user_DllExport void temperature(float _temperature)
    {
        m_temperature = _temperature;
    }

    /*!
     * @brief This function returns the value of member temperature
     * @return Value of member temperature
     */
    inline eProsima_user_DllExport float temperature() const
    {
        return m_temperature;
    }

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    inline eProsima_user_DllExport float& temperature()
    {
        return m_temperature;
    }
    /*!
     * @brief This function sets a value in member range_m_s2
     * @param _range_m_s2 New value for member range_m_s2
     */
    inline eProsima_user_DllExport void range_m_s2(float _range_m_s2)
    {
        m_range_m_s2 = _range_m_s2;
    }

    /*!
     * @brief This function returns the value of member range_m_s2
     * @return Value of member range_m_s2
     */
    inline eProsima_user_DllExport float range_m_s2() const
    {
        return m_range_m_s2;
    }

    /*!
     * @brief This function returns a reference to member range_m_s2
     * @return Reference to member range_m_s2
     */
    inline eProsima_user_DllExport float& range_m_s2()
    {
        return m_range_m_s2;
    }
    /*!
     * @brief This function sets a value in member scaling
     * @param _scaling New value for member scaling
     */
    inline eProsima_user_DllExport void scaling(float _scaling)
    {
        m_scaling = _scaling;
    }

    /*!
     * @brief This function returns the value of member scaling
     * @return Value of member scaling
     */
    inline eProsima_user_DllExport float scaling() const
    {
        return m_scaling;
    }

    /*!
     * @brief This function returns a reference to member scaling
     * @return Reference to member scaling
     */
    inline eProsima_user_DllExport float& scaling()
    {
        return m_scaling;
    }
    /*!
     * @brief This function sets a value in member device_id
     * @param _device_id New value for member device_id
     */
    inline eProsima_user_DllExport void device_id(uint32_t _device_id)
    {
        m_device_id = _device_id;
    }

    /*!
     * @brief This function returns the value of member device_id
     * @return Value of member device_id
     */
    inline eProsima_user_DllExport uint32_t device_id() const
    {
        return m_device_id;
    }

    /*!
     * @brief This function returns a reference to member device_id
     * @return Reference to member device_id
     */
    inline eProsima_user_DllExport uint32_t& device_id()
    {
        return m_device_id;
    }
    /*!
     * @brief This function sets a value in member x_raw
     * @param _x_raw New value for member x_raw
     */
    inline eProsima_user_DllExport void x_raw(int16_t _x_raw)
    {
        m_x_raw = _x_raw;
    }

    /*!
     * @brief This function returns the value of member x_raw
     * @return Value of member x_raw
     */
    inline eProsima_user_DllExport int16_t x_raw() const
    {
        return m_x_raw;
    }

    /*!
     * @brief This function returns a reference to member x_raw
     * @return Reference to member x_raw
     */
    inline eProsima_user_DllExport int16_t& x_raw()
    {
        return m_x_raw;
    }
    /*!
     * @brief This function sets a value in member y_raw
     * @param _y_raw New value for member y_raw
     */
    inline eProsima_user_DllExport void y_raw(int16_t _y_raw)
    {
        m_y_raw = _y_raw;
    }

    /*!
     * @brief This function returns the value of member y_raw
     * @return Value of member y_raw
     */
    inline eProsima_user_DllExport int16_t y_raw() const
    {
        return m_y_raw;
    }

    /*!
     * @brief This function returns a reference to member y_raw
     * @return Reference to member y_raw
     */
    inline eProsima_user_DllExport int16_t& y_raw()
    {
        return m_y_raw;
    }
    /*!
     * @brief This function sets a value in member z_raw
     * @param _z_raw New value for member z_raw
     */
    inline eProsima_user_DllExport void z_raw(int16_t _z_raw)
    {
        m_z_raw = _z_raw;
    }

    /*!
     * @brief This function returns the value of member z_raw
     * @return Value of member z_raw
     */
    inline eProsima_user_DllExport int16_t z_raw() const
    {
        return m_z_raw;
    }

    /*!
     * @brief This function returns a reference to member z_raw
     * @return Reference to member z_raw
     */
    inline eProsima_user_DllExport int16_t& z_raw()
    {
        return m_z_raw;
    }
    /*!
     * @brief This function sets a value in member temperature_raw
     * @param _temperature_raw New value for member temperature_raw
     */
    inline eProsima_user_DllExport void temperature_raw(int16_t _temperature_raw)
    {
        m_temperature_raw = _temperature_raw;
    }

    /*!
     * @brief This function returns the value of member temperature_raw
     * @return Value of member temperature_raw
     */
    inline eProsima_user_DllExport int16_t temperature_raw() const
    {
        return m_temperature_raw;
    }

    /*!
     * @brief This function returns a reference to member temperature_raw
     * @return Reference to member temperature_raw
     */
    inline eProsima_user_DllExport int16_t& temperature_raw()
    {
        return m_temperature_raw;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const sensor_accel_& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    uint64_t m_integral_dt;
    uint64_t m_error_count;
    float m_x;
    float m_y;
    float m_z;
    float m_x_integral;
    float m_y_integral;
    float m_z_integral;
    float m_temperature;
    float m_range_m_s2;
    float m_scaling;
    uint32_t m_device_id;
    int16_t m_x_raw;
    int16_t m_y_raw;
    int16_t m_z_raw;
    int16_t m_temperature_raw;
};

#endif // _sensor_accel__H_